<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta property="article:published_time" content="{{ gallery.last_updated }}">
    <title>{{ gallery.title }} - {{ site_name }}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="/css/site.css" rel="stylesheet">
</head>

<body class="bg-gray-100">
    <header class="bg-white shadow-md">
        <div class="container mx-auto px-4 py-6">
            <h1 class="text-3xl font-bold text-gray-800">
                <a href="/">{{ site_name }}</a>
            </h1>
            <p class="text-gray-600">by {{ author }}</p>
        </div>
    </header>

    <main id="top" class="container mx-auto px-4 py-8">
        <nav class="mb-4">
            <a href="/" class="text-blue-500 hover:underline">&larr; Back to Home</a>
        </nav>

        <section class="mb-12 bg-white rounded-lg shadow-md overflow-hidden">
            <div class="md:flex">


            <tt>
                ===DEBUG====<br/>
                gallery_id: {{ gallery.id }}<br/>
                private_gallery_id: {{ gallery.private_gallery_id }} # Should never be rendered on page. This is a secret.<br/>
                private_gallery_id_hash: {{ gallery.private_gallery_id_hash }} # Check
            </tt>


     <!--
             TODO: Create a friendly login prompt and implement client-side javascript for a gallery login page.

             This is a Jinja2 template that needs to be updated.

             Goals:
             - The backend creates a file named like '{{ gallery.private_gallery_id }}.html' located in the same directory. This page contains the actual gallery.
             - We want to get a password from the user and redirect to this file if it exists.
             - The client-side JS needs to use a specific algorithm (shown below) to generate this filename from a hash of the gallery_id and the password.
             - We need to gracefully handle an invalid password 

            Page specifications:
             - This section should have a simple form that displays a prompt to enter the gallery password, a single password field in a large font and a submit button.
             - The submit button disabled status should update on change of the password field, and only be enabled if there is input present
             - When the form is "submitted" client-side JS should:
                1. Use hashPassword to create a hash of the gallery id and user password. This is the asserted private gallery id.
                2. Use hashString to hash the asserted private gallery id and compare it against the value of gallery.private_gallery_id_hash.
                3. If the asserted private gallery id has the correct hash, we know it is valid, so redirect
                4. If the asserted private gallery id is incorrect, display that to the user and allow another attempt.
            
            Necessary gallery data:    
                gallery_id: {{ gallery.id }}<br/>
                private_gallery_id: {{ gallery.private_gallery_id }}
                private_gallery_id_hash: {{ gallery.private_gallery_id_hash }}

            Client-side hashing function:
                async function hashString(input) {
                    const encoder = new TextEncoder();
                    const data = encoder.encode(input);
                    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
                    const hashArray = Array.from(new Uint8Array(hashBuffer));
                    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
                    return hashHex;
                  }

                async function hashPassword(galleryId, password) {
                    const hashHex = hashString(`${galleryId}:${password}`)
                    // TODO: truncate hashHex to 16 characters to match the gallery.private_gallery_id generated on the backend
                    return hashHex;
                  }
                  
                  // Example Usage                  
                  hashPassword('{{ gallery.id }}', 'your_password')
                    .then(hash => console.log(hash))
                    .catch(error => console.error('Hashing error:', error));

            

    -->             
            </div>
            
        </section>
    </main>

    <footer class="bg-white shadow-md mt-12">
        <div class="container mx-auto px-4 py-6 text-center text-gray-600">
            &copy; {{ current_year }} {{ author }}. All rights reserved.
        </div>
    </footer>
</body>

</html>